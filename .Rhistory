expand(Source, Target) %>%
filter(Source != Target) %>%
bind_rows(direct_synonyms %>%
mutate(sentence_id = 0) %>%
rename(Source = lemma,
Target = synonyms))
text_lexical %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
group_by(sentence_id) %>%
expand(Source, Target) %>%
filter(Source != Target) %>%
bind_rows(direct_synonyms %>%
mutate(sentence_id = 0) %>%
rename(Source = lemma,
Target = synonyms)) %>% View()
View(direct_synonyms)
text_lexical %>%
filter(sentence_id == 1)
text_lexical %>%
select(-upos) %>%
filter(sentence_id == 1)
text_lexical %>%
filter(sentence_id == 1) %>%
select(-c(sentence_id, upos)) %>%
rename(Source = lemma) %>%
mutate(Target = Source)
text_lexical %>%
filter(sentence_id == 1) %>%
select(-c(sentence_id, upos)) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
expand(Source, Target)
text_lexical %>%
filter(sentence_id == 1) %>%
select(-c(sentence_id, upos)) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
expand(Source, Target) %>%
filter(Source != Target)
# FIRST CYCLE
# Create clique
text_lexical %>%
filter(sentence_id == 1) %>%
select(-c(sentence_id, upos)) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
expand(Source, Target) %>%
filter(Source != Target) %>%
save_net(., 'cycle1.net')
save_net = function(edges_list, filename) {
vertices_tbl = edges_list %>%
.$Source %>%
unique() %>%
tibble(vertices = .) %>%
mutate(id = row_number())
vertices_firstline = paste('*Vertices', vertices_tbl %>% nrow())
vertices = paste0(1:(vertices_tbl %>% nrow()),
' "',
vertices_tbl$vertices,
'"')
edges_firstline = '*Edges'
edges = paste(edges_list %>%
rename(vertices = Source) %>%
left_join(vertices_tbl, by='vertices') %>%
.$id,
edges_list %>%
rename(vertices = Target) %>%
left_join(vertices_tbl, by='vertices') %>%
.$id)
if (file.exists(filename)) {
file.remove(filename)
}
write(vertices_firstline, filename)
for (i in 1:length(vertices)) {
write(vertices[i], filename, append=T)
}
write(edges_firstline, filename, append = T)
for (i in 1:length(edges)) {
write(edges[i], filename, append = T)
}
}
# FIRST CYCLE
# Create clique
text_lexical %>%
filter(sentence_id == 1) %>%
select(-c(sentence_id, upos)) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
expand(Source, Target) %>%
filter(Source != Target) %>%
save_net(., 'cycle1.net')
library(igraph)
cycle1 = read_graph('cycle1.net', format = 'pajek')
library(ggraph)
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link() +
geom_node_point()
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link() +
geom_node_point() +
theme_void()
plot_net = function(net) {
net %>%
ggraph(layout = 'kk') +
geom_edge_link() +
geom_node_point() +
theme_void()
}
plot_net(cycle1)
cycle %>%
ggraph(layout = 'kk') +
geom_edge_link() +
geom_node_point() +
geom_text() +
theme_void()
cycle %>%
ggraph(layout = 'kk') +
geom_edge_link() +
geom_node_point() +
geom_text() +
theme_void()
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link() +
geom_node_point() +
geom_text() +
theme_void()
cycle1$names
cycle1$name
V(cycle1)
V(cycle1)$names
V(cycle1)$name
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link() +
geom_node_point() +
geom_text(aes(label = name)) +
theme_void()
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link() +
geom_node_point() +
geom_text(aes(label = V(cycle1)$name)) +
theme_void()
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link() +
geom_node_point() +
geom_node_text() +
theme_void()
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name)) +
theme_void()
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "DDD") +
geom_node_point() +
geom_node_text(aes(label = name)) +
theme_void()
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#ddd") +
geom_node_point() +
geom_node_text(aes(label = name)) +
theme_void()
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point() +
geom_node_text(aes(label = name)) +
theme_void()
length(cycle1)
degree(cycle1)
length(V(cycle1))
V(cycle1)$activation = 1/length(V(cycle))
V(cycle1)$activation = 1/length(V(cycle1))
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation)) +
geom_node_text(aes(label = name)) +
theme_void()
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation), color = "#777777") +
geom_node_text(aes(label = name)) +
theme_void()
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation, alpha = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
as_adjacency_matrix(cycle1)
V(cycle1)$activation
# Expand clique network
# Create clique network
text_lexical %>%
filter(sentence_id %in% c(1, 2)) %>%
select(-c(sentence_id, upos)) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
expand(Source, Target) %>%
filter(Source != Target) %>%
save_net(., 'cycle2.net')
cycle2 = read_graph('cycle2.net', format = 'pajek')
cycle2 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation, alpha = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
V(cycle2)$activation = 1/length(V(cycle2))
cycle2 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation, alpha = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
as_adjacency_matrix(cycle2)
# TODO Define function to create network of cliques
# TODO Define function to spread activation
# Create clique network
text_lexical %>%
filter(sentence_id %in% c(1, 2)) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
group_by(sentence_id) %>%
expand(Source, Target) %>%
filter(Source != Target) %>%
select(-c(sentence_id, upos)) %>%
save_net(., 'cycle2.net')
text_lexical %>%
filter(sentence_id %in% c(1, 2)) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
group_by(sentence_id)
text_lexical %>%
filter(sentence_id %in% c(1, 2)) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
group_by(sentence_id) %>%
expand(Source, Target)
# TODO Define function to create network of cliques
# TODO Define function to spread activation
# Create clique network
text_lexical %>%
filter(sentence_id %in% c(1, 2)) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
group_by(sentence_id) %>%
expand(Source, Target) %>%
filter(Source != Target) %>%
select(-c(sentence_id)) %>%
save_net(., 'cycle2.net')
cycle2 = read_graph('cycle2.net', format = 'pajek')
cycle2 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation, alpha = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
V(cycle2)$activation = 1/length(V(cycle2))
cycle2 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation, alpha = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
as_adjacency_matrix(cycle2)
# TODO Define function to create network of cliques
# TODO Define function to spread activation
# Create clique network
text_lexical %>%
filter(sentence_id %in% c(1)) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
group_by(sentence_id) %>%
expand(Source, Target) %>%
filter(Source != Target) %>%
select(-c(sentence_id)) %>%
save_net(., 'cycle1.net')
cycle1 = read_graph('cycle1.net', format = 'pajek')
V(cycle1)$activation = 1/length(V(cycle1))
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation, alpha = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
cycle2 = read_graph('cycle2.net', format = 'pajek') %>% simplify()
V(cycle2)$activation = 1/length(V(cycle2))
cycle2 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation, alpha = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
as_adjacency_matrix(cycle2)
cycle1 = read_graph('cycle1.net', format = 'pajek') %>% simplify()
V(cycle1)$activation = 1/length(V(cycle1))
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation, alpha = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
text_lexical %>%
filter(sentence_id %in% c(1, 2))
# Get relevant synonyms and hypernyms
text_lexical %>%
filter(sentence_id %in% c(1, 2)) %>%
.$lemma %>% unique()
# Get relevant synonyms and hypernyms
lemmas_in_cycle = text_lexical %>%
filter(sentence_id %in% c(1, 2)) %>%
.$lemma %>% unique()
direct_synonyms %>%
filter(lemma %in% lemmas_in_cycle & synonyms %in% lemmas_in_cycle)
direct_synonyms %>%
filter(lemma %in% lemmas_in_cycle & synonyms %in% lemmas_in_cycle) %>%
bind_rows(direct_hypernyms %>%
filter(lemma %in% lemmas_in_cycle & hypernyms %in% lemmas_in_cycle))
cycle2 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation, alpha = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
# TODO Define function to create network of cliques
# TODO Define function to spread activation
# Get relevant synonyms and hypernyms
lemmas_in_cycle = text_lexical %>%
filter(sentence_id %in% c(1)) %>%
.$lemma %>% unique()
# TODO Check if this is right
direct_synonyms %>%
filter(lemma %in% lemmas_in_cycle & synonyms %in% lemmas_in_cycle) %>%
bind_rows(direct_hypernyms %>%
filter(lemma %in% lemmas_in_cycle & hypernyms %in% lemmas_in_cycle))
as_adjacency_matrix(cycle2)
t = 1
rm(t)
W = as_adjacency_matrix(cycle1)
dim(cycle1)
length(V(cycle1))
V(cycle1)
length(V(cycle1))
rep(1, length(V(cycle1)))
A = rep(1, length(V(cycle1)))
W = as_adjacency_matrix(cycle1)
W %*% A
A %*% W
(A %*% W)/6
sum(A %*% W)
(A %*% W)/sum(A %*% W)
(A %*% W)/sum(A %*% W) %>% sum()
(A %*% W)/sum(A %*% W)
.1428571*6
.1428571*7
(A %*% W)/sum(A %*% W) %>% as_vector()
(A %*% W)/sum(A %*% W) %>% as.numeric()
(A %*% W)/sum(A %*% W)
V(cycle1)$activation = (A %*% W)/sum(A %*% W)
cycle1 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation, alpha = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
V(cycle1)
V(cycle2)
A = V(cycle1)$activation
A
A = c(V(cycle1)$activation, rep(1, length(V(cycle2)) - length(V(cycle1))))
A
W = as_adjacency_matrix(cycle2)
W
W = as_adjacency_matrix(cycle2)
V(cycle2)$activation = (A %*% W)/sum(A %*% W)
cycle2 %>%
ggraph(layout = 'kk') +
geom_edge_link(color = "#dddddd") +
geom_node_point(aes(size = activation, alpha = activation), color = "#555555") +
geom_node_text(aes(label = name)) +
theme_void()
V(cycle2)$activation
1:1
# Get relevant synonyms and hypernyms
lemmas_in_cycle = text_lexical %>%
filter(sentence_id %in% 1:3) %>%
.$lemma %>% unique()
lemmas
lemmas_in_cycle
# TODO Check if this is right
direct_synonyms %>%
filter(lemma %in% lemmas_in_cycle & synonyms %in% lemmas_in_cycle) %>%
bind_rows(direct_hypernyms %>%
filter(lemma %in% lemmas_in_cycle & hypernyms %in% lemmas_in_cycle))
# Get relevant synonyms and hypernyms
lemmas_in_cycle = text_lexical %>%
filter(sentence_id %in% 1:34) %>%
.$lemma %>% unique()
# TODO Check if this is right
direct_synonyms %>%
filter(lemma %in% lemmas_in_cycle & synonyms %in% lemmas_in_cycle) %>%
bind_rows(direct_hypernyms %>%
filter(lemma %in% lemmas_in_cycle & hypernyms %in% lemmas_in_cycle))
# Get relevant synonyms and hypernyms
lemmas_in_cycle = text_lexical %>%
filter(sentence_id %in% 1:3) %>%
.$lemma %>% unique()
# TODO Check if this is right
direct_synonyms %>%
filter(lemma %in% lemmas_in_cycle & synonyms %in% lemmas_in_cycle) %>%
bind_rows(direct_hypernyms %>%
filter(lemma %in% lemmas_in_cycle & hypernyms %in% lemmas_in_cycle))
# Create clique network
text_lexical %>%
filter(sentence_id %in% 1:3) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
group_by(sentence_id) %>%
expand(Source, Target) %>%
filter(Source != Target) %>%
select(-c(sentence_id)) %>%
bind_rows(direct_synonyms %>%
filter(lemma %in% c())) %>%
save_net(., 'cycle3.net')
cycle2 = read_graph('cycle3.net', format = 'pajek') %>% simplify()
A = c(V(cycle2)$activation, rep(1, length(V(cycle3)) - length(V(cycle2))))
cycle3 = read_graph('cycle3.net', format = 'pajek') %>% simplify()
A = c(V(cycle2)$activation, rep(1, length(V(cycle3)) - length(V(cycle2))))
W = as_adjacency_matrix(cycle3)
V(cycle3)$activation = (A %*% W)/sum(A %*% W)
A
A = c(V(cycle2)$activation, rep(1, length(V(cycle3)) - length(V(cycle2))))
A
V(cycle2)$activation
cycle2 = read_graph('cycle2.net', format = 'pajek') %>% simplify()
A = c(V(cycle1)$activation, rep(1, length(V(cycle2)) - length(V(cycle1))))
W = as_adjacency_matrix(cycle2)
V(cycle2)$activation = (A %*% W)/sum(A %*% W)
# TODO Define function to create network of cliques
# TODO Define function to spread activation
# Get relevant synonyms and hypernyms
lemmas_in_cycle = text_lexical %>%
filter(sentence_id %in% 1:1) %>%
.$lemma %>% unique()
# TODO Check if this is right
direct_synonyms %>%
filter(lemma %in% lemmas_in_cycle & synonyms %in% lemmas_in_cycle) %>%
bind_rows(direct_hypernyms %>%
filter(lemma %in% lemmas_in_cycle & hypernyms %in% lemmas_in_cycle))
# Create clique network
text_lexical %>%
filter(sentence_id %in% 1:1) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
group_by(sentence_id) %>%
expand(Source, Target) %>%
filter(Source != Target) %>%
select(-c(sentence_id)) %>%
save_net(., 'cycle1.net')
cycle1 = read_graph('cycle1.net', format = 'pajek') %>% simplify()
A = rep(1, length(V(cycle1)))
W = as_adjacency_matrix(cycle1)
V(cycle1)$activation = (A %*% W)/sum(A %*% W)
# TODO Define function to create network of cliques
# TODO Define function to spread activation
# Get relevant synonyms and hypernyms
lemmas_in_cycle = text_lexical %>%
filter(sentence_id %in% 1:1) %>%
.$lemma %>% unique()
# TODO Check if this is right
direct_synonyms %>%
filter(lemma %in% lemmas_in_cycle & synonyms %in% lemmas_in_cycle) %>%
bind_rows(direct_hypernyms %>%
filter(lemma %in% lemmas_in_cycle & hypernyms %in% lemmas_in_cycle))
# Create clique network
text_lexical %>%
filter(sentence_id %in% 1:1) %>%
rename(Source = lemma) %>%
mutate(Target = Source) %>%
group_by(sentence_id) %>%
expand(Source, Target) %>%
filter(Source != Target) %>%
select(-c(sentence_id)) %>%
save_net(., 'cycle1.net')
cycle1 = read_graph('cycle1.net', format = 'pajek') %>% simplify()
A = rep(1, length(V(cycle1)))
A
W = as_adjacency_matrix(cycle1)
W
V(cycle1)$activation = (A %*% W)/sum(A %*% W)
(A %*% W)
(A %*% W)/sum(A %*% W)
V(cycle1)
V(cycle1)$activation = (A %*% W)/sum(A %*% W)
